// Generated by CoffeeScript 1.11.1
(function() {
  var first_connect, socket, subscriptions,
    slice = [].slice;

  socket = io.connect();

  window.remote = function() {
    var args, cb, i, method, service;
    service = arguments[0], method = arguments[1], args = 4 <= arguments.length ? slice.call(arguments, 2, i = arguments.length - 1) : (i = 2, []), cb = arguments[i++];
    return socket.emit.apply(socket, ['remote', service, method].concat(slice.call(args), [cb]));
  };

  subscriptions = {};

  window.subscribe = function(service, type, cb) {
    var base;
    subscriptions[service] || (subscriptions[service] = {});
    (base = subscriptions[service])[type] || (base[type] = []);
    subscriptions[service][type].push(cb);
    return socket.emit('subscribe', service, type);
  };

  socket.on('event', function(service, type, event) {
    var cbs;
    console.log('[socket.on event]');
    console.log(arguments);
    if (cbs = subscriptions[service][type]) {
      return cbs.map(function(cb) {
        return cb(event);
      });
    }
  });

  first_connect = true;

  socket.on('hello', function() {
    var fns, results, service, type, types;
    if (first_connect) {
      first_connect = false;
      return;
    }
    results = [];
    for (service in subscriptions) {
      types = subscriptions[service];
      results.push((function() {
        var results1;
        results1 = [];
        for (type in types) {
          fns = types[type];
          results1.push(socket.emit('subscribe', service, type));
        }
        return results1;
      })());
    }
    return results;
  });

  window.h = highland;

  window.eventStream = function(service, event) {
    var stream;
    stream = h();
    subscribe(service, event, function(value) {
      return stream.write(value);
    });
    return stream;
  };

  window.log = h.curry(function(s, v) {
    if (!(typeof v === "function" ? v(console.log(s)) : void 0)) {

    } else {
      return console.log('[' + s + ']', v);
    }
  });

}).call(this);
